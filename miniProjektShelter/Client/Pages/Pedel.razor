@page "/pedel"
@using miniProjektShelter.Shared;
@using miniProjektShelter.Client.Services;

<NavLink class="nav-link" href="booking">
    <span class="oi oi-home" aria-hidden="true"></span> Booking
</NavLink>

<h1>Pedel side</h1>

<h4>Kommune</h4>
<label for="lang">Vælg kommune</label>
<select name="kommuneSelector" id="kommuneSelector" @bind="chosenKommune" onclick="@changeMunicipality()">
    @foreach (var navn in KommuneList)
    {
        <option value=@navn>@navn</option>
    }
</select>

<table class="table">
    <thead>
        <tr>
            <th>CostumerName</th>
            <th>BookingEmail</th>
            <th>ShelterNavn</th>
            <th>Date1</th>
            <th>Date2</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var Booking in bookingsToShow)
        {

            <tr>
                <td>@Booking.CostumerName</td>
                <td>@Booking.Email</td>
                <td>@Booking.findShelterInList(Booking.ShelterID, SheltersList).Properties.Navn</td>
                <td>@Booking.Date1</td>
                <td>@Booking.Date2</td>
            </tr>
        }
    </tbody>
</table>

@code {

    private List<Shelter> SheltersList = new List<Shelter>();
    private List<CostumerBooking> BookingerList = new List<CostumerBooking>();
    private List<string> KommuneList = new List<string>();
    private List<Shelter> SheltersToShow = new List<Shelter>();

    private List<CostumerBooking> bookingsToShow = new List<CostumerBooking>();

    private string chosenKommune = "Samsø Kommune";


    [Inject]
    public IShelterService? Service { get; set; }
    protected override async Task OnInitializedAsync()
    {
        SheltersList = (await Service!.GetAllItems())!.ToList();
        BookingerList = (await Service!.GetAllBookings())!.ToList();

        foreach (Shelter shelterX in SheltersList)
        {
            if (!KommuneList.Contains(shelterX.Properties.KommuneNavn!))
            {
                KommuneList.Add(shelterX.Properties.KommuneNavn!);
            }
        }



    }


    public int changeMunicipality()
    {

        SheltersToShow.Clear();
        foreach (Shelter shelterX in SheltersList)
        {
            if (shelterX.Properties.KommuneNavn == chosenKommune && shelterX.Properties.Facil_ty == "Shelter")
            {
                SheltersToShow.Add(shelterX);
            }
        }
        bookingsToShow.Clear();

        foreach (CostumerBooking bookingX in BookingerList)
        {
            foreach (Shelter shelterX in SheltersToShow)
            {
                if (shelterX.MongoId == bookingX.ShelterID)
                {
                    bookingsToShow.Add(bookingX);
                }
            }
        }
        return 1;

    }



}

